//
class Trie {

    class TrieNode{
        boolean isEnd;
        //Create 26 Childrens
        TrieNode[] child;
        
        public TrieNode(){
            child = new TrieNode[26];
        }
       
    }
    
    TrieNode root; 
     public Trie() {
            root = new TrieNode();
        }
    
    public void insert(String word) {
        //We need to create a currNode as this is the pointer to flow through the Trie data structure. 
        TrieNode curr = root;
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(curr.child[c - 'a'] == null){
                curr.child[c - 'a'] = new TrieNode();    
            }
            // if(i == word.length() -1){
            //     curr.isEnd = true;
            // }
            curr = curr.child[c - 'a'];
        }
        curr.isEnd = true;
    }
    
    public boolean search(String word) {
        TrieNode curr = root;
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(curr.child[c - 'a'] == null){
                return false;
            }
            curr = curr.child[c - 'a'];
        }
        return curr.isEnd;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode curr = root;
        
        for(int i = 0; i < prefix.length(); i++){
            char c = prefix.charAt(i);
            if(curr.child[c - 'a'] == null){
                return false;
            }
            curr = curr.child[c - 'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
